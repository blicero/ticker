# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2021-02-22 18:52:14 krylon>
#
#+TAGS: optimize(o) refactor(r) bug(b) feature(f) architecture(a)
#+TODO: TODO(t) IMPLEMENT(i) TEST(e) RESEARCH(r) | DONE(d)
#+TODO: MEDITATE(m) PLANNING(p) | FAILED(f) CANCELLED(c) SUSPENDED(s)
#+PRIORITIES: A G D

* Ticker
  Ticker is an RSS/Atom reader with a builtin archive and web interface.
  It supports tagging news items, and rating news items, with a bayesian
  classifier to automatically suggest ratings, as well as filtering news items
  based on suggested ratings.
** Clocktable
   #+BEGIN: clocktable :scope file :maxlevel 20
   #+CAPTION: Clock summary at [2021-02-22 Mo 18:52]
   | Headline                  | Time       |          |         |       |       |
   |---------------------------+------------+----------+---------+-------+-------|
   | *Total time*              | *3d 12:34* |          |         |       |       |
   |---------------------------+------------+----------+---------+-------+-------|
   | Ticker                    | 3d 12:34   |          |         |       |       |
   | \_  Main                  |            |     0:56 |         |       |       |
   | \_    Shutdown            |            |          |    0:56 |       |       |
   | \_  Components [5/7]      |            | 3d 11:38 |         |       |       |
   | \_    Feed [4/6]          |            |          | 1d 3:27 |       |       |
   | \_      Homepage          |            |          |         |  0:12 |       |
   | \_      Rating [1/3]      |            |          |         | 23:59 |       |
   | \_        Web Frontend    |            |          |         |       | 10:59 |
   | \_        Classifier      |            |          |         |       | 12:23 |
   | \_    Database [1/1]      |            |          |   21:55 |       |       |
   | \_      Due Feeds         |            |          |         |  1:26 |       |
   | \_    Reader [0/0]        |            |          |   15:50 |       |       |
   | \_    Web interface [0/0] |            |          |   18:26 |       |       |
   #+END:

** Questions
** Main
   Main is, of course, the package / function that binds the whole thing
   together.
*** Shutdown
    :LOGBOOK:
    CLOCK: [2021-02-17 Mi 19:25]--[2021-02-17 Mi 20:21] =>  0:56
    :END:
** Components [5/7]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
  :END:
*** Feed [4/6]
    :LOGBOOK:
    CLOCK: [2021-02-06 Sa 17:57]--[2021-02-06 Sa 18:47] =>  0:50
    CLOCK: [2021-02-05 Fr 20:57]--[2021-02-05 Fr 21:57] =>  1:00
    CLOCK: [2021-02-01 Mo 15:27]--[2021-02-01 Mo 16:29] =>  1:02
    CLOCK: [2021-02-01 Mo 12:46]--[2021-02-01 Mo 13:10] =>  0:24
    :END:
**** CANCELLED URL
     CLOSED: [2021-02-05 Fr 20:57]
     Is there an advantage to representing the URL as a *net.URL object?
**** DONE Fetching
     CLOSED: [2021-02-05 Fr 20:57]
**** DONE Homepage
     CLOSED: [2021-02-16 Di 13:44]
     :LOGBOOK:
     CLOCK: [2021-02-16 Di 13:32]--[2021-02-16 Di 13:44] =>  0:12
     :END:
**** Rating [1/3]
     :LOGBOOK:
     CLOCK: [2021-02-15 Mo 22:53]--[2021-02-15 Mo 23:30] =>  0:37
     :END:
***** DONE Database Queries
      CLOSED: [2021-02-16 Di 00:45]
***** TODO Web Frontend
      :LOGBOOK:
      CLOCK: [2021-02-22 Mo 16:56]--[2021-02-22 Mo 18:52] =>  1:56
      CLOCK: [2021-02-19 Fr 13:06]--[2021-02-19 Fr 15:59] =>  2:53
      CLOCK: [2021-02-17 Mi 13:01]--[2021-02-17 Mi 14:06] =>  1:05
      CLOCK: [2021-02-17 Mi 00:05]--[2021-02-17 Mi 01:22] =>  1:17
      CLOCK: [2021-02-16 Di 17:28]--[2021-02-16 Di 21:16] =>  3:48
      :END:
***** TODO Classifier
      :LOGBOOK:
      CLOCK: [2021-02-22 Mo 15:54]--[2021-02-22 Mo 16:56] =>  1:02
      CLOCK: [2021-02-19 Fr 20:25]--[2021-02-19 Fr 20:59] =>  0:34
      CLOCK: [2021-02-18 Do 20:07]--[2021-02-18 Do 23:59] =>  3:52
      CLOCK: [2021-02-18 Do 17:28]--[2021-02-18 Do 18:02] =>  0:34
      CLOCK: [2021-02-18 Do 09:09]--[2021-02-18 Do 10:26] =>  1:17
      CLOCK: [2021-02-17 Mi 21:04]--[2021-02-18 Do 02:08] =>  5:04
      :END:
*** Database [1/1]
    :LOGBOOK:
    CLOCK: [2021-02-19 Fr 11:52]--[2021-02-19 Fr 13:06] =>  1:14
    CLOCK: [2021-02-15 Mo 23:30]--[2021-02-16 Di 00:44] =>  1:14
    CLOCK: [2021-02-05 Fr 13:15]--[2021-02-05 Fr 17:23] =>  4:08
    CLOCK: [2021-02-04 Do 18:55]--[2021-02-04 Do 20:30] =>  1:35
    CLOCK: [2021-02-04 Do 18:05]--[2021-02-04 Do 18:37] =>  0:32
    CLOCK: [2021-02-04 Do 12:47]--[2021-02-04 Do 13:52] =>  1:05
    CLOCK: [2021-02-04 Do 09:18]--[2021-02-04 Do 10:03] =>  0:45
    CLOCK: [2021-02-03 Mi 19:24]--[2021-02-03 Mi 23:04] =>  3:40
    CLOCK: [2021-02-02 Di 18:50]--[2021-02-02 Di 20:50] =>  2:00
    CLOCK: [2021-02-02 Di 07:53]--[2021-02-02 Di 07:59] =>  0:06
    CLOCK: [2021-02-01 Mo 16:30]--[2021-02-01 Mo 20:40] =>  4:10
    :END:
    Is there any reason /not/ to use good old SQLite?
    I don't think so.
**** DONE Due Feeds
     CLOSED: [2021-02-16 Di 00:45]
     :LOGBOOK:
     CLOCK: [2021-02-15 Mo 18:51]--[2021-02-15 Mo 20:17] =>  1:26
     :END:
     I want a method/query to fetch only feeds that are due for a refresh.
*** Reader [0/0]
    :LOGBOOK:
    CLOCK: [2021-02-17 Mi 19:12]--[2021-02-17 Mi 19:18] =>  0:06
    CLOCK: [2021-02-15 Mo 20:17]--[2021-02-15 Mo 20:52] =>  0:35
    CLOCK: [2021-02-15 Mo 18:40]--[2021-02-15 Mo 18:51] =>  0:11
    CLOCK: [2021-02-15 Mo 13:27]--[2021-02-15 Mo 15:30] =>  2:03
    CLOCK: [2021-02-14 So 23:05]--[2021-02-14 So 23:43] =>  0:38
    CLOCK: [2021-02-08 Mo 20:33]--[2021-02-08 Mo 21:16] =>  0:43
    CLOCK: [2021-02-08 Mo 19:25]--[2021-02-08 Mo 19:51] =>  0:26
    CLOCK: [2021-02-08 Mo 12:58]--[2021-02-08 Mo 15:36] =>  2:38
    CLOCK: [2021-02-07 So 17:45]--[2021-02-07 So 22:15] =>  4:30
    CLOCK: [2021-02-07 So 11:46]--[2021-02-07 So 15:46] =>  4:00
    :END:
*** Web interface [0/0]
    :LOGBOOK:
    CLOCK: [2021-02-18 Do 18:20]--[2021-02-18 Do 19:20] =>  1:00
    CLOCK: [2021-02-17 Mi 20:37]--[2021-02-17 Mi 21:03] =>  0:26
    CLOCK: [2021-02-16 Di 13:32]--[2021-02-16 Di 13:32] =>  0:00
    CLOCK: [2021-02-16 Di 12:15]--[2021-02-16 Di 12:55] =>  0:40
    CLOCK: [2021-02-16 Di 01:03]--[2021-02-16 Di 01:14] =>  0:11
    CLOCK: [2021-02-14 So 20:55]--[2021-02-14 So 22:51] =>  1:56
    CLOCK: [2021-02-13 Sa 15:08]--[2021-02-13 Sa 21:35] =>  6:27
    CLOCK: [2021-02-12 Fr 19:04]--[2021-02-12 Fr 23:56] =>  4:52
    CLOCK: [2021-02-12 Fr 17:21]--[2021-02-12 Fr 19:04] =>  1:43
    CLOCK: [2021-02-12 Fr 15:23]--[2021-02-12 Fr 16:34] =>  1:11
    :END:
** Tedious tasks
