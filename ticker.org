# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2021-03-20 18:54:12 krylon>
#
#+TAGS: optimize(o) refactor(r) bug(b) feature(f) architecture(a)
#+TODO: TODO(t) IMPLEMENT(i) TEST(e) RESEARCH(r) | DONE(d)
#+TODO: MEDITATE(m) PLANNING(p) | FAILED(f) CANCELLED(c) SUSPENDED(s)
#+PRIORITIES: A G D

* Ticker
  Ticker is an RSS/Atom reader with a builtin archive and web interface.
  It supports tagging news items, and rating news items, with a bayesian
  classifier to automatically suggest ratings, as well as filtering news items
  based on suggested ratings.
** Clocktable
   #+BEGIN: clocktable :scope file :maxlevel 20
   #+CAPTION: Clock summary at [2021-03-20 Sa 18:54]
   | Headline                               | Time      |          |          |         |       |      |
   |----------------------------------------+-----------+----------+----------+---------+-------+------|
   | *Total time*                           | *9d 0:46* |          |          |         |       |      |
   |----------------------------------------+-----------+----------+----------+---------+-------+------|
   | Ticker                                 | 9d 0:46   |          |          |         |       |      |
   | \_  Main                               |           |     0:56 |          |         |       |      |
   | \_    Shutdown                         |           |          |     0:56 |         |       |      |
   | \_  Components [24/26]                 |           | 8d 23:50 |          |         |       |      |
   | \_    Feed [6/6]                       |           |          |  1d 8:39 |         |       |      |
   | \_      Homepage                       |           |          |          |    0:12 |       |      |
   | \_      Rating [3/3]                   |           |          |          | 1d 5:11 |       |      |
   | \_        Web Frontend                 |           |          |          |         | 12:09 |      |
   | \_        Classifier                   |           |          |          |         | 16:25 |      |
   | \_    Database [1/1]                   |           |          |    21:55 |         |       |      |
   | \_      Due Feeds                      |           |          |          |    1:26 |       |      |
   | \_    Reader [2/2]                     |           |          |    18:06 |         |       |      |
   | \_      Timestamps                     |           |          |          |    0:15 |       |      |
   | \_      Pseudo-duplicates              |           |          |          |    2:01 |       |      |
   | \_    Web interface [7/8]              |           |          | 1d 23:24 |         |       |      |
   | \_      Various small-ish improvements |           |          |          |    2:42 |       |      |
   | \_      Embed                          |           |          |          |    3:00 |       |      |
   | \_      Snazzy [3/3]                   |           |          |          |    4:04 |       |      |
   | \_        Ooopsie [1/1]                |           |          |          |         |  0:51 |      |
   | \_          Read later form            |           |          |          |         |       | 0:51 |
   | \_        Subscribe                    |           |          |          |         |  2:35 |      |
   | \_      Limit description length       |           |          |          |    1:32 |       |      |
   | \_      Manage Feeds                   |           |          |          |   17:11 |       |      |
   | \_    Tags [3/4]                       |           |          |  2d 3:35 |         |       |      |
   | \_      Database                       |           |          |          |   10:59 |       |      |
   | \_        Hierarchy                    |           |          |          |         |  8:58 |      |
   | \_      Web interface                  |           |          |          | 1d 4:45 |       |      |
   | \_      Suggestions                    |           |          |          |   10:01 |       |      |
   | \_    Search [3/3]                     |           |          |  1d 0:23 |         |       |      |
   | \_      Moar!                          |           |          |          |   20:53 |       |      |
   | \_    Read Later [2/2]                 |           |          |    19:48 |         |       |      |
   | \_      Web interface                  |           |          |          |   17:46 |       |      |
   #+END:

** Questions
** Main
   Main is, of course, the package / function that binds the whole thing
   together.
*** Shutdown
    :LOGBOOK:
    CLOCK: [2021-02-17 Mi 19:25]--[2021-02-17 Mi 20:21] =>  0:56
    :END:
** Components [24/26]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
  :END:
*** Feed [6/6]
    :LOGBOOK:
    CLOCK: [2021-02-06 Sa 17:57]--[2021-02-06 Sa 18:47] =>  0:50
    CLOCK: [2021-02-05 Fr 20:57]--[2021-02-05 Fr 21:57] =>  1:00
    CLOCK: [2021-02-01 Mo 15:27]--[2021-02-01 Mo 16:29] =>  1:02
    CLOCK: [2021-02-01 Mo 12:46]--[2021-02-01 Mo 13:10] =>  0:24
    :END:
**** CANCELLED URL
     CLOSED: [2021-02-05 Fr 20:57]
     Is there an advantage to representing the URL as a *net.URL object?
**** DONE Fetching
     CLOSED: [2021-02-05 Fr 20:57]
**** DONE Homepage
     CLOSED: [2021-02-16 Di 13:44]
     :LOGBOOK:
     CLOCK: [2021-02-16 Di 13:32]--[2021-02-16 Di 13:44] =>  0:12
     :END:
**** Rating [3/3]
     :LOGBOOK:
     CLOCK: [2021-02-15 Mo 22:53]--[2021-02-15 Mo 23:30] =>  0:37
     :END:
***** DONE Database Queries
      CLOSED: [2021-02-16 Di 00:45]
***** DONE Web Frontend
      CLOSED: [2021-03-06 Sa 10:36]
      :LOGBOOK:
      CLOCK: [2021-02-22 Mo 21:04]--[2021-02-22 Mo 22:14] =>  1:10
      CLOCK: [2021-02-22 Mo 16:56]--[2021-02-22 Mo 18:52] =>  1:56
      CLOCK: [2021-02-19 Fr 13:06]--[2021-02-19 Fr 15:59] =>  2:53
      CLOCK: [2021-02-17 Mi 13:01]--[2021-02-17 Mi 14:06] =>  1:05
      CLOCK: [2021-02-17 Mi 00:05]--[2021-02-17 Mi 01:22] =>  1:17
      CLOCK: [2021-02-16 Di 17:28]--[2021-02-16 Di 21:16] =>  3:48
      :END:
***** DONE Classifier
      CLOSED: [2021-03-09 Di 20:04]
      :LOGBOOK:
      CLOCK: [2021-03-09 Di 18:50]--[2021-03-09 Di 20:04] =>  1:14
      CLOCK: [2021-03-09 Di 01:17]--[2021-03-09 Di 01:50] =>  0:33
      CLOCK: [2021-03-06 Sa 22:34]--[2021-03-07 So 00:49] =>  2:15
      CLOCK: [2021-02-22 Mo 15:54]--[2021-02-22 Mo 16:56] =>  1:02
      CLOCK: [2021-02-19 Fr 20:25]--[2021-02-19 Fr 20:59] =>  0:34
      CLOCK: [2021-02-18 Do 20:07]--[2021-02-18 Do 23:59] =>  3:52
      CLOCK: [2021-02-18 Do 17:28]--[2021-02-18 Do 18:02] =>  0:34
      CLOCK: [2021-02-18 Do 09:09]--[2021-02-18 Do 10:26] =>  1:17
      CLOCK: [2021-02-17 Mi 21:04]--[2021-02-18 Do 02:08] =>  5:04
      :END:
****** [2021-03-06 Sa 22:24]
       I am not entirely sure, yet, if it's me or the library, but the
       classifier I currently use gives me rather weird ratings. The API is
       very nice, but I think would like to hear a second opinion. 
*** Database [1/1]
    :LOGBOOK:
    CLOCK: [2021-02-19 Fr 11:52]--[2021-02-19 Fr 13:06] =>  1:14
    CLOCK: [2021-02-15 Mo 23:30]--[2021-02-16 Di 00:44] =>  1:14
    CLOCK: [2021-02-05 Fr 13:15]--[2021-02-05 Fr 17:23] =>  4:08
    CLOCK: [2021-02-04 Do 18:55]--[2021-02-04 Do 20:30] =>  1:35
    CLOCK: [2021-02-04 Do 18:05]--[2021-02-04 Do 18:37] =>  0:32
    CLOCK: [2021-02-04 Do 12:47]--[2021-02-04 Do 13:52] =>  1:05
    CLOCK: [2021-02-04 Do 09:18]--[2021-02-04 Do 10:03] =>  0:45
    CLOCK: [2021-02-03 Mi 19:24]--[2021-02-03 Mi 23:04] =>  3:40
    CLOCK: [2021-02-02 Di 18:50]--[2021-02-02 Di 20:50] =>  2:00
    CLOCK: [2021-02-02 Di 07:53]--[2021-02-02 Di 07:59] =>  0:06
    CLOCK: [2021-02-01 Mo 16:30]--[2021-02-01 Mo 20:40] =>  4:10
    :END:
    Is there any reason /not/ to use good old SQLite?
    I don't think so.
**** DONE Due Feeds
     CLOSED: [2021-02-16 Di 00:45]
     :LOGBOOK:
     CLOCK: [2021-02-15 Mo 18:51]--[2021-02-15 Mo 20:17] =>  1:26
     :END:
     I want a method/query to fetch only feeds that are due for a refresh.
*** Reader [2/2]
    :LOGBOOK:
    CLOCK: [2021-02-17 Mi 19:12]--[2021-02-17 Mi 19:18] =>  0:06
    CLOCK: [2021-02-15 Mo 20:17]--[2021-02-15 Mo 20:52] =>  0:35
    CLOCK: [2021-02-15 Mo 18:40]--[2021-02-15 Mo 18:51] =>  0:11
    CLOCK: [2021-02-15 Mo 13:27]--[2021-02-15 Mo 15:30] =>  2:03
    CLOCK: [2021-02-14 So 23:05]--[2021-02-14 So 23:43] =>  0:38
    CLOCK: [2021-02-08 Mo 20:33]--[2021-02-08 Mo 21:16] =>  0:43
    CLOCK: [2021-02-08 Mo 19:25]--[2021-02-08 Mo 19:51] =>  0:26
    CLOCK: [2021-02-08 Mo 12:58]--[2021-02-08 Mo 15:36] =>  2:38
    CLOCK: [2021-02-07 So 17:45]--[2021-02-07 So 22:15] =>  4:30
    CLOCK: [2021-02-07 So 11:46]--[2021-02-07 So 15:46] =>  4:00
    :END:
**** DONE Timestamps
     CLOSED: [2021-03-06 Sa 22:18]
     :LOGBOOK:
     CLOCK: [2021-03-06 Sa 18:44]--[2021-03-06 Sa 18:59] =>  0:15
     :END:
     I have subscribed to one particular feed where all the Items have
     timestamps at 23:59:00 of the current day. This is very annoying, so I
     want to find a way to detect those and at least set the current time in
     the time stamp.
**** DONE Pseudo-duplicates
     CLOSED: [2021-03-06 Sa 22:18]
     :LOGBOOK:
     CLOCK: [2021-03-06 Sa 20:17]--[2021-03-06 Sa 22:18] =>  2:01
     :END:
     I currently check for duplicate items by comparing the URL, but I still
     get many cases where essentially the same Item will show up several times
     with only slightly differing URLs. Dude! 

     [2021-03-06 Sa 20:41]
     I have found a relatively simple approach, now I have to wait and see if
     it works.
     Simply skipping the Item if the headline already exists, is not a good
     idea, either, I should at least take the timestamps into consideration.
*** Web interface [7/8]
    :LOGBOOK:
    CLOCK: [2021-03-05 Fr 15:20]--[2021-03-05 Fr 15:49] =>  0:29
    CLOCK: [2021-02-18 Do 18:20]--[2021-02-18 Do 19:20] =>  1:00
    CLOCK: [2021-02-17 Mi 20:37]--[2021-02-17 Mi 21:03] =>  0:26
    CLOCK: [2021-02-16 Di 13:32]--[2021-02-16 Di 13:32] =>  0:00
    CLOCK: [2021-02-16 Di 12:15]--[2021-02-16 Di 12:55] =>  0:40
    CLOCK: [2021-02-16 Di 01:03]--[2021-02-16 Di 01:14] =>  0:11
    CLOCK: [2021-02-14 So 20:55]--[2021-02-14 So 22:51] =>  1:56
    CLOCK: [2021-02-13 Sa 15:08]--[2021-02-13 Sa 21:35] =>  6:27
    CLOCK: [2021-02-12 Fr 19:04]--[2021-02-12 Fr 23:56] =>  4:52
    CLOCK: [2021-02-12 Fr 17:21]--[2021-02-12 Fr 19:04] =>  1:43
    CLOCK: [2021-02-12 Fr 15:23]--[2021-02-12 Fr 16:34] =>  1:11
    :END:
**** DONE Various small-ish improvements
     CLOSED: [2021-03-14 So 16:54]
     :LOGBOOK:
     CLOCK: [2021-03-14 So 16:40]--[2021-03-14 So 16:54] =>  0:14
     CLOCK: [2021-03-13 Sa 15:23]--[2021-03-13 Sa 17:51] =>  2:28
     :END:
**** DONE Embed
     CLOSED: [2021-03-05 Fr 23:03]
     :LOGBOOK:
     CLOCK: [2021-03-05 Fr 22:07]--[2021-03-05 Fr 23:03] =>  0:56
     CLOCK: [2021-03-05 Fr 19:33]--[2021-03-05 Fr 21:37] =>  2:04
     :END:
     For a number of years, I have used a homegrown solution for embedding
     HTML templates, Javascript files etc. in a Go binary via the go:generate
     directive, so all I needed for deployment was the executable file itself,
     and nothing else.

     That has worked well enough, for a long time, but /today/
     ([2021-03-05 Fr]), I am running into a situation where it causes trouble,
     because the resulting source file has grown *really* big, and the static
     analyzer I use as part of my build system chokes on it, gobbling up all
     available RAM (and then some!), while going absolutely nowhere.

     However, the recently-released Go 1.16 release supports the go:embed
     directive, which would make the same task more painless.
     So there we go.
     It is going to take some work, making that change. Not /that/ much, and I
     don't think it's going to be tricky, but it will be tedious, especially
     as I am rather tired while writing these words.

     [2021-03-05 Fr 23:03]
     Seems to work. Now I have to build Go 1.16 from source on OpenBSD,
     because go:embed is still new.
**** Snazzy [3/3]
     :LOGBOOK:
     CLOCK: [2021-03-06 Sa 17:56]--[2021-03-06 Sa 18:34] =>  0:38
     :END:
     I tried to include script.aculo.us for in-place-editing, but that library
     is based on prototype.js, and both libraries appear have been dead for
     the better part of a decade, and there were some errors in the browser's
     Javascript console when loading, so I gave up on that.
     But there is /something/ to fill that place, right?
     ...
     Doesn't look like it. jquery-ui /might/ be what I am looking for, but it
     seems to be too much of a hassle.
     ...
     I am using bootstrap now, still have to get into the whole bootstrap way
     of doing things, but it seems nice enough, well-documented, and a
     reasonably easy way of making the whole thing less of an eye sore.
***** Ooopsie [1/1]
      I appear to have broken some things when trying to make them less ugly
****** DONE Read later form
       CLOSED: [2021-03-06 Sa 19:53]
       :LOGBOOK:
       CLOCK: [2021-03-06 Sa 19:02]--[2021-03-06 Sa 19:53] =>  0:51
       :END:
       When I click the "Read Later"-button now ([2021-03-06 Sa 19:00]), the
       button disappears, and the spacing is adjusted as if to display the
       form, but the form remains hidden. :-?
***** DONE [#B] Subscribe
      CLOSED: [2021-03-07 So 16:43]
      :LOGBOOK:
      CLOCK: [2021-03-07 So 16:09]--[2021-03-07 So 16:43] =>  0:34
      CLOCK: [2021-03-07 So 13:35]--[2021-03-07 So 15:36] =>  2:01
      :END:
      I would like the subscription form to be a pulldown-/popup-menu from the
      navbar rather than a separate page.

      [2021-03-07 So 16:42]
      Yeah, it kind of works. The form still looks rather ugly, and I should
      probably AJAX-ify it, but that was actually quite nice.
***** DONE [#C] Menu / Navbar
      CLOSED: [2021-03-09 Di 21:33]
      I should overhaul the menu/navbar a little. It looks much better
      already, but still could do with a little polishing.
**** TODO [#E] Un-escape HTML?
     This /sounds/ simple, but when I think about it, it is quite tricky,
     actually.
**** DONE [#D] Limit description length
     CLOSED: [2021-03-09 Di 21:33]
     :LOGBOOK:
     CLOCK: [2021-03-09 Di 20:27]--[2021-03-09 Di 21:33] =>  1:06
     CLOCK: [2021-03-07 So 01:55]--[2021-03-07 So 02:21] =>  0:26
     :END:
     Some RSS feeds have the unfortunate habit of dumping the entire article /
     blog post in the description field of the RSS item. I would like to limit
     the amount of text that is rendered for the description.
     /Alternatively/, I could try to limit the amount of screen real estate
     the description occupies, using CSS, bootstrap and such trickery. Could
     be a nice opportunity to learn about these things.

     [2021-03-09 Di 20:27]
     I am going to try using bootstrap for this purpose. I am not overly
     optimistic, but let's see.
**** DONE [#C] Manage Feeds
     CLOSED: [2021-03-09 Di 21:34]
     :LOGBOOK:
     CLOCK: [2021-03-12 Fr 16:51]--[2021-03-12 Fr 22:16] =>  5:25
     CLOCK: [2021-03-08 Mo 20:34]--[2021-03-08 Mo 22:40] =>  2:06
     CLOCK: [2021-03-08 Mo 17:13]--[2021-03-08 Mo 20:06] =>  2:53
     CLOCK: [2021-03-08 Mo 10:36]--[2021-03-08 Mo 10:50] =>  0:14
     CLOCK: [2021-03-07 So 16:48]--[2021-03-07 So 23:21] =>  6:33
     :END:
     I want to un-subscribe feeds and possibly change their data (name,
     homepage, etc.).
*** Tags [3/4]
    :LOGBOOK:
    CLOCK: [2021-03-02 Di 18:54]--[2021-03-02 Di 20:44] =>  1:50
    :END:
    I would like to create tags and assign them to items.
    Furthermore, I would like to use the Bayesian classifier to suggest tags
    for Items and maybe assign them automatically eventually.
**** DONE Database
     CLOSED: [2021-03-03 Mi 00:39]
     :LOGBOOK:
     CLOCK: [2021-02-24 Mi 19:35]--[2021-02-24 Mi 21:36] =>  2:01
     :END:
***** SUSPENDED Hierarchy
      CLOSED: [2021-03-01 Mo 19:48]
      :LOGBOOK:
      CLOCK: [2021-03-01 Mo 19:19]--[2021-03-01 Mo 19:47] =>  0:28
      CLOCK: [2021-02-27 Sa 21:25]--[2021-02-28 So 00:48] =>  3:23
      CLOCK: [2021-02-27 Sa 16:51]--[2021-02-27 Sa 19:13] =>  2:22
      CLOCK: [2021-02-26 Fr 19:15]--[2021-02-26 Fr 22:00] =>  2:45
      :END:
      I need to figure out an SQL query to get the Tags in the right order,
      "right" meaning the order should reflect the hierarchy.
      ...
      That is surprisingly tricky, and given the fact it is not such a big
      problem, I postpone this.
**** DONE Web interface
     CLOSED: [2021-03-10 Mi 20:31]
     :LOGBOOK:
     CLOCK: [2021-03-10 Mi 20:15]--[2021-03-10 Mi 20:31] =>  0:16
     CLOCK: [2021-03-10 Mi 10:33]--[2021-03-10 Mi 15:06] =>  4:33
     CLOCK: [2021-03-10 Mi 09:43]--[2021-03-10 Mi 09:49] =>  0:06
     CLOCK: [2021-03-09 Di 22:10]--[2021-03-10 Mi 00:50] =>  2:40
     CLOCK: [2021-03-07 So 01:12]--[2021-03-07 So 01:37] =>  0:25
     CLOCK: [2021-03-03 Mi 13:25]--[2021-03-03 Mi 14:55] =>  1:30
     CLOCK: [2021-03-03 Mi 13:11]--[2021-03-03 Mi 13:20] =>  0:09
     CLOCK: [2021-03-03 Mi 12:50]--[2021-03-03 Mi 13:10] =>  0:20
     CLOCK: [2021-03-02 Di 20:44]--[2021-03-03 Mi 00:38] =>  3:54
     CLOCK: [2021-02-26 Fr 18:49]--[2021-02-26 Fr 19:14] =>  0:25
     CLOCK: [2021-02-26 Fr 16:47]--[2021-02-26 Fr 18:07] =>  1:20
     CLOCK: [2021-02-25 Do 16:12]--[2021-02-26 Fr 00:13] =>  8:01
     CLOCK: [2021-02-25 Do 00:45]--[2021-02-25 Do 03:22] =>  2:37
     CLOCK: [2021-02-24 Mi 21:47]--[2021-02-25 Do 00:16] =>  2:29
     :END:     
**** TODO Suggestions
     :LOGBOOK:
     CLOCK: [2021-03-11 Do 21:37]--[2021-03-12 Fr 00:50] =>  3:13
     CLOCK: [2021-03-11 Do 18:19]--[2021-03-11 Do 19:45] =>  1:26
     CLOCK: [2021-03-11 Do 16:30]--[2021-03-11 Do 18:08] =>  1:38
     CLOCK: [2021-03-11 Do 10:35]--[2021-03-11 Do 11:52] =>  1:17
     CLOCK: [2021-03-10 Mi 23:09]--[2021-03-10 Mi 23:55] =>  0:46
     CLOCK: [2021-03-10 Mi 20:47]--[2021-03-10 Mi 22:28] =>  1:41
     :END:
     I would like to automatically suggest Tags, based on what Tags have been
     assigned to other Items.
*** Search [3/3]
    :LOGBOOK:
    CLOCK: [2021-02-23 Di 20:00]--[2021-02-23 Di 23:30] =>  3:30
    :END:
    I want to support full text search if possible. And it should be possible,
    SQLite has support for that. In fact, I think I already used it once, but
    I am somewhat fuzzy on the details.
**** DONE [#F] Moar!
     CLOSED: [2021-03-20 Sa 18:54]
     :LOGBOOK:
     CLOCK: [2021-03-20 Sa 14:53]--[2021-03-20 Sa 18:54] =>  4:01
     CLOCK: [2021-03-20 Sa 11:18]--[2021-03-20 Sa 11:45] =>  0:27
     CLOCK: [2021-03-19 Fr 21:35]--[2021-03-19 Fr 22:17] =>  0:42
     CLOCK: [2021-03-19 Fr 00:29]--[2021-03-19 Fr 01:29] =>  1:00
     CLOCK: [2021-03-18 Do 17:58]--[2021-03-19 Fr 00:00] =>  6:02
     CLOCK: [2021-03-18 Do 00:29]--[2021-03-18 Do 00:58] =>  0:29
     CLOCK: [2021-03-17 Mi 19:31]--[2021-03-17 Mi 23:10] =>  3:39
     CLOCK: [2021-03-17 Mi 14:06]--[2021-03-17 Mi 14:20] =>  0:14
     CLOCK: [2021-03-15 Mo 16:40]--[2021-03-15 Mo 20:59] =>  4:19
     :END:
     I would like to be able to search by tags, feeds, time... that's going to
     be tedious.

     [2021-03-09 Di 21:51]
     So far, I have only used the search once or twice, so it is not a high
     priority.
**** DONE Database
     CLOSED: [2021-02-23 Di 23:30]
     I /might/ have to clean up the item data before feeding it to the FTS
     index, specifically remove all HTML tags.
     I will /try/ to use the content as-is, hoping, naively, that it will work
     well enough. But I will try to keep in mind this might be a problem.
     Now that I think of it, I might have to to do that for rating, too. :-|

     [2021-02-23 Di 21:17]
     I think I have got it ready, but I still need to test it, which in turn
     requires support in the web interface.
**** DONE Web interface
     CLOSED: [2021-02-23 Di 23:30]
*** Read Later [2/2]
    :LOGBOOK:
    CLOCK: [2021-03-02 Di 17:19]--[2021-03-02 Di 18:22] =>  1:03
    CLOCK: [2021-03-02 Di 14:45]--[2021-03-02 Di 15:05] =>  0:20
    CLOCK: [2021-03-01 Mo 20:01]--[2021-03-01 Mo 20:40] =>  0:39
    :END:
    It would be nice to be able to mark Items for later reading, so they do
    not get lost.
**** DONE Database
     CLOSED: [2021-03-03 Mi 10:23]
**** DONE [#F] Web interface
     CLOSED: [2021-03-12 Fr 16:51]
     :LOGBOOK:
     CLOCK: [2021-03-05 Fr 16:21]--[2021-03-05 Fr 18:38] =>  2:17
     CLOCK: [2021-03-05 Fr 14:21]--[2021-03-05 Fr 15:03] =>  0:42
     CLOCK: [2021-03-04 Do 14:25]--[2021-03-04 Do 23:21] =>  8:56
     CLOCK: [2021-03-04 Do 10:23]--[2021-03-04 Do 10:34] =>  0:11
     CLOCK: [2021-03-03 Mi 18:49]--[2021-03-03 Mi 23:47] =>  4:58
     CLOCK: [2021-03-03 Mi 10:23]--[2021-03-03 Mi 11:05] =>  0:42
     :END:
***** [2021-03-04 Do 15:23]
      To display ReadLater items, I use a table that is /almost/ the same as I
      use for Items elsewhere, but /not quite/. 
      I would like to factor out the rendering of individual cells - such as
      Rating and Tags - into separate templates that I can use from both places
      so I have less duplication of code. This is not a very high priority
      issue, but it would be desirable.
      Well, either /that/, or I adapt the items.tmpl template to accomodate
      both use cases. But that sounds exceedingly tedious.
** Tedious tasks
